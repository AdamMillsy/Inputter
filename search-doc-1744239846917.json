{"searchDocs":[{"title":"Inputter","type":0,"sectionRef":"#","url":"/Inputter/api/Inputter","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#properties","content":" ","version":null,"tagName":"h2"},{"title":"Name​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#Name","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Inputter.Name: string Name of the inputter. This should be unique for each inputter.  ","version":null,"tagName":"h3"},{"title":"Active​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#Active","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Inputter.Active: boolean Whether the inputter is currently active (i.e. is at least one of the inputs bound triggered). Can be used if the action triggered relies on checking the input is still active.  ","version":null,"tagName":"h3"},{"title":"Enabled​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#Enabled","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Inputter.Enabled: boolean Whether the inputter is enabled. If this is false, the inputter will not trigger any events.  ","version":null,"tagName":"h3"},{"title":"OnActivated​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#OnActivated","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Inputter.OnActivated: Signal Signal that is fired when the inputter is activated. This will be fired when at least one of the inputs bound to the inputter is triggered.  ","version":null,"tagName":"h3"},{"title":"OnDeactivated​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#OnDeactivated","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Inputter.OnDeactivated: Signal Signal that is fired when the inputter is deactivated. This will be fired when all of the inputs bound to the inputter are deactivated.  ","version":null,"tagName":"h3"},{"title":"ActiveInputs​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#ActiveInputs","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Inputter.ActiveInputs: {Input} The inputs currently used by the inputter. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#new","content":"&lt;/&gt; Inputter.new( name: string,-- The name of the inputter. Should be unique inputs: {Input}-- The inputs that will trigger the inputter. This should be a table of Input objects. ) → Inputter-- The new inputter object Creates a new inputter object, ideally there should be one input for each different player action. I.e. an inputter for punch, another inputter for fly, etc. local Inputter = require(ReplicatedStorage.Packages.Inputter) local punchInput = Inputter.new(&quot;PunchInput&quot;, { Inputter.Input.PRESS({ Input = Enum.UserInputType.MouseButton1 IgnoreGameProcessedEvent = true, } )   ","version":null,"tagName":"h3"},{"title":"AddInput​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#AddInput","content":"&lt;/&gt; Inputter:AddInput( Input: Input-- The input to add to the inputter. ) → () Adds a new input to an already existing inputter.  ","version":null,"tagName":"h3"},{"title":"RemoveInput​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#RemoveInput","content":"Work In Progress &lt;/&gt; Inputter:RemoveInput( Input: Input-- The input to remove from the inputter. ) → () Removes an input from an already existing inputter. This method is a work in progress, in the future it may be expanded to allow removal by keybind or other properties. ","version":null,"tagName":"h3"}],"options":{"id":"default"}}