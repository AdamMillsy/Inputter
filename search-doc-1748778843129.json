{"searchDocs":[{"title":"MULTIPLE_PRESS","type":0,"sectionRef":"#","url":"/Inputter/api/MULTIPLE_PRESS","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"MULTIPLE_PRESS","url":"/Inputter/api/MULTIPLE_PRESS#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"MULTIPLE_PRESS","url":"/Inputter/api/MULTIPLE_PRESS#new","content":"&lt;/&gt; MULTIPLE_PRESS.new( BindingInfo: BindingInfo,-- The binding information for the input. The input index must be only a single input method (i.e. Enum.KeyCode, Enum.UserInputType, or GuiButton). PressCount: number,-- The number of times the input must be pressed to trigger the action. Default is 2. TimeFrame: number-- The time frame in seconds within which the input must be pressed. Default is 0.5 seconds. ) → Input-- The new MULTIPLE_PRESS object.  ","version":null,"tagName":"h3"},{"title":"PRESS","type":0,"sectionRef":"#","url":"/Inputter/api/PRESS","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"PRESS","url":"/Inputter/api/PRESS#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"PRESS","url":"/Inputter/api/PRESS#new","content":"&lt;/&gt; PRESS.new( BindingInfo: BindingInfo-- The binding information for the input. The input index must be only a single input method (i.e. Enum.KeyCode, Enum.UserInputType, or GuiButton). ) → Input-- The new PRESS object.  ","version":null,"tagName":"h3"},{"title":"Inputter","type":0,"sectionRef":"#","url":"/Inputter/api/Inputter","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#types","content":" ","version":null,"tagName":"h2"},{"title":"BindingInfo​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#BindingInfo","content":"&lt;/&gt; interface BindingInfo { Input: Enum.KeyCode | Enum.UserInputType | GuiButton | {Enum.KeyCode | Enum.UserInputType | GuiButton }-- The input that will trigger the binding. Whether this is a table or single input is contextual on the trigger being constructed. IgnoreGameProcessedEvent: boolean?-- By default this value is false, and inputs already processed by the game (such as when interacting with GUI) are ignored. If this flag is set to true the inputter will be triggered regardless of the context of the input. }  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#properties","content":" ","version":null,"tagName":"h2"},{"title":"Name​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#Name","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Inputter.Name: string Name of the inputter. This should be unique for each inputter.  ","version":null,"tagName":"h3"},{"title":"Active​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#Active","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Inputter.Active: boolean Whether the inputter is currently active (i.e. is at least one of the inputs bound triggered). Can be used if the action triggered relies on checking the input is still active.  ","version":null,"tagName":"h3"},{"title":"Enabled​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#Enabled","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Inputter.Enabled: boolean Whether the inputter is enabled. If this is false, the inputter will not trigger any events.  ","version":null,"tagName":"h3"},{"title":"OnActivated​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#OnActivated","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Inputter.OnActivated: Signal Signal that is fired when the inputter is activated. This will be fired when at least one of the inputs bound to the inputter is triggered.  ","version":null,"tagName":"h3"},{"title":"OnDeactivated​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#OnDeactivated","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Inputter.OnDeactivated: Signal Signal that is fired when the inputter is deactivated. This will be fired when all of the inputs bound to the inputter are deactivated.  ","version":null,"tagName":"h3"},{"title":"Triggers​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#Triggers","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Inputter.Triggers: {Trigger} The triggers that the inputter is currently listening to. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#new","content":"&lt;/&gt; Inputter.new( name: string,-- The name of the inputter. Should be unique triggers: {Trigger}-- The triggers that will be used by the inputter. This should be a table of Trigger objects. ) → Inputter-- The new inputter object Creates a new inputter object, ideally there should be one input for each different player action. I.e. an inputter for punch, another inputter for fly, etc. local punchInput = Inputter.new(&quot;PunchInput&quot;, { Inputter.Trigger.PRESS({ Input = Enum.KeyCode.ButtonR2, IgnoreGameProcessedEvent = true, }), Inputter.Trigger.MULTIPLE_PRESS({ Input = Enum.UserInputType.MouseButton1, IgnoreGameProcessedEvent = true, }, 2, 0.3) })   ","version":null,"tagName":"h3"},{"title":"Deserialize​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#Deserialize","content":"&lt;/&gt; Inputter.Deserialize( serialized: string-- The serialized string representation of the inputter. ) → Inputter-- The rebuilt inputter object. Rebuilds an inputter from a serialized string.  ","version":null,"tagName":"h3"},{"title":"AddTrigger​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#AddTrigger","content":"&lt;/&gt; Inputter:AddTrigger( trigger: Trigger-- The trigger to add to the inputter. ) → () Adds a new trigger to an already existing inputter.  ","version":null,"tagName":"h3"},{"title":"RemoveTrigger​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#RemoveTrigger","content":"Work In Progress &lt;/&gt; Inputter:RemoveTrigger( Trigger: Trigger-- The trigger to remove from the inputter. ) → () Removes a trigger from an already existing inputter. This method is a work in progress, in the future it may be expanded to allow removal by keybind or other properties.  ","version":null,"tagName":"h3"},{"title":"GetAllTriggers​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#GetAllTriggers","content":"&lt;/&gt; Inputter:GetAllTriggers() → {Input}-- All inputs this input is currently connected to. Returns all the inputs currently used by the inputter.  ","version":null,"tagName":"h3"},{"title":"IsActive​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#IsActive","content":"&lt;/&gt; Inputter:IsActive() → boolean-- Whether the inputter is currently active or not. Returns whether the inputter is currently active or not. This will be true if at least one of the inputs bound to the inputter is triggered.  ","version":null,"tagName":"h3"},{"title":"Enable​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#Enable","content":"&lt;/&gt; Inputter:Enable() → () Enables the inputter, meaning it can send activated and deactivated events.  ","version":null,"tagName":"h3"},{"title":"Disable​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#Disable","content":"&lt;/&gt; Inputter:Disable() → () Disables the inputter, meaning it will not send activated and deactivated events.  ","version":null,"tagName":"h3"},{"title":"Destroy​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#Destroy","content":"&lt;/&gt; Inputter:Destroy() → () Destroys the inputter, meaning it will no longer send activated and deactivated events. This should be called when the inputter is no longer needed.  ","version":null,"tagName":"h3"},{"title":"Serialize​","type":1,"pageTitle":"Inputter","url":"/Inputter/api/Inputter#Serialize","content":"&lt;/&gt; Inputter:Serialize() → string-- The JSON encoded representation of the inputter. Converts the inputter to a table representation, for serialization purposes. ","version":null,"tagName":"h3"}],"options":{"id":"default"}}