"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[271],{4831:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new inputter object, ideally there should be one input for each different player action. I.e. an inputter for punch, another inputter for fly, etc.\\n```lua\\nlocal Inputter = require(ReplicatedStorage.Packages.Inputter)\\n\\nlocal punchInput = Inputter.new(\\"PunchInput\\", {\\n\\tInputter.Input.PRESS({\\n\\t\\tInput = Enum.UserInputType.MouseButton1\\n\\t\\tIgnoreGameProcessedEvent = true,\\n\\t}\\n)\\n```","params":[{"name":"name","desc":"The name of the inputter. Should be unique","lua_type":"string"},{"name":"inputs","desc":"The inputs that will trigger the inputter. This should be a table of Input objects.","lua_type":"{Input}"}],"returns":[{"desc":"The new inputter object","lua_type":"Inputter"}],"function_type":"static","source":{"line":40,"path":"src/init.lua"}},{"name":"_setup","desc":"Initial inputter setup method, used to begin listening to the initially passed inputs. Should only be called internally.","params":[{"name":"Inputs","desc":"The inputs that will trigger the inputter.","lua_type":"{Input}"}],"returns":[],"function_type":"method","private":true,"source":{"line":101,"path":"src/init.lua"}},{"name":"AddInput","desc":"Adds a new input to an already existing inputter.","params":[{"name":"Input","desc":"The input to add to the inputter.","lua_type":"Input"}],"returns":[],"function_type":"method","source":{"line":112,"path":"src/init.lua"}},{"name":"RemoveInput","desc":"Removes an input from an already existing inputter. This method is a work in progress, in the future it may be expanded to allow removal by keybind or other properties.","params":[{"name":"Input","desc":"The input to remove from the inputter.","lua_type":"Input"}],"returns":[],"function_type":"method","tags":["Work In Progress"],"source":{"line":134,"path":"src/init.lua"}}],"properties":[{"name":"Name","desc":"Name of the inputter. This should be unique for each inputter.\\n\\t","lua_type":"string","readonly":true,"source":{"line":54,"path":"src/init.lua"}},{"name":"Active","desc":"Whether the inputter is currently active (i.e. is at least one of the inputs bound triggered). Can be used if the action triggered relies on checking the input is still active.\\n\\t","lua_type":"boolean","readonly":true,"source":{"line":61,"path":"src/init.lua"}},{"name":"Enabled","desc":"Whether the inputter is enabled. If this is false, the inputter will not trigger any events.\\n\\t","lua_type":"boolean","readonly":true,"source":{"line":68,"path":"src/init.lua"}},{"name":"OnActivated","desc":"Signal that is fired when the inputter is activated. This will be fired when at least one of the inputs bound to the inputter is triggered.\\n\\t","lua_type":"Signal","readonly":true,"source":{"line":75,"path":"src/init.lua"}},{"name":"OnDeactivated","desc":"Signal that is fired when the inputter is deactivated. This will be fired when all of the inputs bound to the inputter are deactivated.\\n\\t","lua_type":"Signal","readonly":true,"source":{"line":82,"path":"src/init.lua"}},{"name":"ActiveInputs","desc":"The inputs currently used by the inputter.\\n    ","lua_type":"{Input}","readonly":true,"source":{"line":89,"path":"src/init.lua"}}],"types":[],"name":"Inputter","desc":"The inputter class represents each individual action a player can make. It should be used to abstract away from the different input methods ROBLOX provides.","source":{"line":15,"path":"src/init.lua"}}')}}]);