"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[456],{4831:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new inputter object, ideally there should be one input for each different player action. I.e. an inputter for punch, another inputter for fly, etc.\\n```lua\\nlocal punchInput = Inputter.new(\\"PunchInput\\", {\\n\\tInputter.Trigger.PRESS({\\n\\t\\tInput = Enum.KeyCode.ButtonR2,\\n\\t\\tIgnoreGameProcessedEvent = true,\\n\\t}),\\n\\tInputter.Trigger.MULTIPLE_PRESS({\\n\\t\\tInput = Enum.UserInputType.MouseButton1,\\n\\t\\tIgnoreGameProcessedEvent = true,\\n\\t}, 2, 0.3)\\n})\\n```","params":[{"name":"name","desc":"The name of the inputter. Should be unique","lua_type":"string"},{"name":"triggers","desc":"The triggers that will be used by the inputter. This should be a table of Trigger objects.","lua_type":"{Trigger}"}],"returns":[{"desc":"The new inputter object","lua_type":"Inputter"}],"function_type":"static","source":{"line":38,"path":"src/init.luau"}},{"name":"_setup","desc":"Initial inputter setup method, used to begin listening to the initially passed triggers. Should only be called internally.","params":[{"name":"triggers","desc":"The triggers that will be used by the inputter.","lua_type":"{Trigger}"}],"returns":[],"function_type":"method","private":true,"source":{"line":100,"path":"src/init.luau"}},{"name":"AddInput","desc":"Adds a new trigger to an already existing inputter.","params":[{"name":"trigger","desc":"The trigger to add to the inputter.","lua_type":"Trigger"}],"returns":[],"function_type":"method","source":{"line":111,"path":"src/init.luau"}},{"name":"RemoveInput","desc":"Removes a trigger from an already existing inputter. This method is a work in progress, in the future it may be expanded to allow removal by keybind or other properties.","params":[{"name":"Trigger","desc":"The trigger to remove from the inputter.","lua_type":"Trigger"}],"returns":[],"function_type":"method","tags":["Work In Progress"],"source":{"line":137,"path":"src/init.luau"}},{"name":"GetAllTriggers","desc":"Returns all the inputs currently used by the inputter.","params":[],"returns":[{"desc":"All inputs this input is currently connected to.","lua_type":"{Input}"}],"function_type":"method","source":{"line":157,"path":"src/init.luau"}},{"name":"_activate","desc":"Internal method that is called when an input is activated. Should only be called internally.","params":[{"name":"InputObject","desc":"The input object that triggered the event.","lua_type":"InputObject"},{"name":"GameProcessedEvent","desc":"Whether the game processed the event or not.","lua_type":"boolean"},{"name":"...","desc":"Any additional arguments passed to the event.","lua_type":"any"}],"returns":[],"function_type":"method","private":true,"source":{"line":173,"path":"src/init.luau"}},{"name":"_deactivate","desc":"Internal method that is called when an input is deactivated. Should only be called internally.","params":[{"name":"InputObject","desc":"The input object that triggered the event.","lua_type":"InputObject"},{"name":"GameProcessedEvent","desc":"Whether the game processed the event or not.","lua_type":"boolean"},{"name":"...","desc":"Any additional arguments passed to the event.","lua_type":"any"}],"returns":[],"function_type":"method","private":true,"source":{"line":188,"path":"src/init.luau"}},{"name":"IsActive","desc":"Returns whether the inputter is currently active or not. This will be true if at least one of the inputs bound to the inputter is triggered.","params":[],"returns":[{"desc":"Whether the inputter is currently active or not.","lua_type":"boolean"}],"function_type":"method","source":{"line":202,"path":"src/init.luau"}},{"name":"Enable","desc":"Enables the inputter, meaning it can send activated and deactivated events.","params":[],"returns":[],"function_type":"method","source":{"line":210,"path":"src/init.luau"}},{"name":"Disable","desc":"Disables the inputter, meaning it will not send activated and deactivated events.","params":[],"returns":[],"function_type":"method","source":{"line":218,"path":"src/init.luau"}},{"name":"Destroy","desc":"Destroys the inputter, meaning it will no longer send activated and deactivated events. This should be called when the inputter is no longer needed.","params":[],"returns":[],"function_type":"method","source":{"line":226,"path":"src/init.luau"}}],"properties":[{"name":"Name","desc":"Name of the inputter. This should be unique for each inputter.\\n\\t","lua_type":"string","readonly":true,"source":{"line":53,"path":"src/init.luau"}},{"name":"Active","desc":"Whether the inputter is currently active (i.e. is at least one of the inputs bound triggered). Can be used if the action triggered relies on checking the input is still active.\\n\\t","lua_type":"boolean","readonly":true,"source":{"line":60,"path":"src/init.luau"}},{"name":"Enabled","desc":"Whether the inputter is enabled. If this is false, the inputter will not trigger any events.\\n\\t","lua_type":"boolean","readonly":true,"source":{"line":67,"path":"src/init.luau"}},{"name":"OnActivated","desc":"Signal that is fired when the inputter is activated. This will be fired when at least one of the inputs bound to the inputter is triggered.\\n\\t","lua_type":"Signal","readonly":true,"source":{"line":74,"path":"src/init.luau"}},{"name":"OnDeactivated","desc":"Signal that is fired when the inputter is deactivated. This will be fired when all of the inputs bound to the inputter are deactivated.\\n\\t","lua_type":"Signal","readonly":true,"source":{"line":81,"path":"src/init.luau"}},{"name":"ActiveTriggers","desc":"The triggers that the inputter is currently listening to.\\n\\t","lua_type":"{Trigger}","readonly":true,"source":{"line":88,"path":"src/init.luau"}}],"types":[{"name":"BindingInfo","desc":"","fields":[{"name":"Input","lua_type":"Enum.KeyCode | Enum.UserInputType | GuiButton | {Enum.KeyCode | Enum.UserInputType | GuiButton}","desc":"The input that will trigger the binding. Whether this is a table or single input is contextual on the trigger being constructed."},{"name":"IgnoreGameProcessedEvent","lua_type":"boolean?","desc":"By default this value is false, and inputs already processed by the game (such as when interacting with GUI) are ignored. If this flag is set to true the inputter will be triggered regardless of the context of the input."}],"source":{"line":33,"path":"src/Types.luau"}}],"name":"Inputter","desc":"The inputter class represents each individual action a player can make. It should be used to abstract away from the different input methods ROBLOX provides.","source":{"line":9,"path":"src/Types.luau"}}')}}]);